@using KST.UnizaSchedule.Table
@using KST.UnizaSchedule.Api.Enums

@if (this.Data != null)
{
    <div class="schedule">
        <table>
            <thead>
            <tr>
                <th>&nbsp;</th>
                @for (int x = 0; x < ScheduleTable.BlockCount; x++)
                {
                    <th>@(x + ScheduleTable.FirstBlockHour):00</th>
                }
            </tr>
            </thead>
            <tbody>
            @for (DayOfWeek y = DayOfWeek.Monday; y <= DayOfWeek.Friday; y++)
            {
                var rowSpan = Data.Where(x => x.Day == y).Max(x => x.Count);
                @for (var r = 0; r < rowSpan; r++)
                {
                    <tr class="@(r == 0 ? "first-day-row": "")">
                        @if (r == 0)
                        {
                            <th rowspan="@rowSpan">@y</th>
                        }
                        @for (int x = ScheduleTable.FirstBlockHour; x <= ScheduleTable.LastBlockHour; x++)
                        {
                            var item = this.Data[y, x].Skip(r).FirstOrDefault();
                            
                            if (item != null)
                            {
                                if (item.Duration == 0) continue;
                                <td colspan="@item.Duration" class="@(item.LessonType == LessonType.Lecture ? "prednaska" : "") blok" style="background-color: @(GetColor(item))">
                                    @if (item.LessonType == LessonType.Lecture)
                                    {
                                        <strong>prednáška</strong><br/>
                                        @item.TeacherName<br/>
                                        @item.RoomName
                                    }
                                    else
                                    {
                                        @item.TeacherName<br/>
                                        @item.Group<br/>
                                        @item.RoomName
                                    }
                                </td>
                            }
                            else
                            {
                                <td></td>
                            }
                        }
                    </tr>
                }
            }
            </tbody>
        </table>
    </div>
}

@code {
    [Parameter]
    public GroupedScheduleTable? Data { get; set; }

    private static string[] Colors = new[]
    {
        "#1abc9c",
        "#3498db",
        "#9b59b6",
        "#f1c40f",
        "#c0392b",
        "#7f8c8d",
        "#6ab04c",
        "#7ed6df",
        "#4834d4",
        "#30336b"
    };

    private Dictionary<string, int> _colorMap = new Dictionary<string, int>();

    private string GetColor(GroupedScheduleItem item)
    {
        if (_colorMap.TryGetValue(item.TeacherName, out var value))
        {
            return Colors[value];
        } 
        else if (_colorMap.Count < Colors.Length)
        {
            _colorMap[item.TeacherName] = _colorMap.Count;
            return Colors[_colorMap[item.TeacherName]];
        }
        return "#dff9fb";
    }

}
